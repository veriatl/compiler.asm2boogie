module ER2REL;

create OUT : REL from IN : ER;


--PRECONDITION ER

--@pre
helper context ER!ERSchema def: unique_er_schema_names(): Boolean = -- ERSchema names are unique
  ER!ERSchema.allInstances()->forAll(s1,s2| s1<>s2 implies s1.name<>s2.name);

--@pre
helper context ER!ERSchema def: unique_er_relship_names(): Boolean = -- relship names are unique in ERSchema
  ER!ERSchema.allInstances()->forAll(s | s.relships->forAll(r1,r2 | r1<>r2 implies r1.name<>r2.name));

--@pre
helper context ER!ERSchema def: unique_er_entity_names(): Boolean = -- entity names are unique in ERSchema
  ER!ERSchema.allInstances()->forAll(s | s.entities->forAll(e1,e2 | e1<>e2 implies e1.name<>e2.name));

--@pre
helper context ER!ERSchema def: disjoint_er_entity_relship_names(): Boolean = -- disjoint entity and relship names
  ER!ERSchema.allInstances()->forAll(s | s.relships->forAll(r | 
    s.entities->forAll(e | r<>e implies r.name<>e.name)));

--@pre
helper context ER!EREntity def: unique_er_entity_attr_names(): Boolean = -- attr names are unique in EREntity
  ER!EREntity->allInstances()->forAll(e | e.attrs->forAll(a1,a2 | a1.name=a2.name implies a1=a2));

--@pre
helper context ER!ERRelship def: unique_er_relship_attr_names(): Boolean = -- attr names are unique in ERRelship
  ER!ERRelship->allInstances()->forAll(r | r.attrs->forAll(a1,a2 | a1.name = a2.name implies a1=a2));

--@pre
helper context ER!EREntity def: exist_er_entity_iskey(): Boolean = -- EREntity have a key
  ER!EREntity.allInstances()->forAll(e | e.attrs->exists(a | a.isKey));

--POSTCONDITION REL
--@post
helper context REL!RELSchema def: unique_rel_schema_names(): Boolean = -- RELSchema names are unique 
  REL!RELSchema.allInstances()->forAll(r1,r2| r1<>r2 implies r1.name<>r2.name);
  
--@post
helper context REL!RELSchema def: unique_rel_relation_names(): Boolean = -- relation names are unique in RELSchema
  REL!RELSchema.allInstances()->forAll(s | s.relations->forAll(r1,r2| r1<>r2 implies r1.name<>r2.name));

--@post
helper context REL!RELRelation def: unique_rel_attribute_names(): Boolean = -- attribute names unique in RELRelation
  REL!RELRelation->allInstances()->forAll(r | r.attrs->forAll(a1,a2 | a1.name=a2.name implies a1=a2));  

--@post
helper context REL!RELRelation def: exist_rel_relation_iskey(): Boolean = -- RELRelations have a key
  REL!RELRelation->allInstances()->forAll(r | r.attrs->exists(a | a.isKey));